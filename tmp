def handle_read(self):
        self.read_client_buffer += self.recv(BUFF_SIZE)
        if not self.read_client_buffer:
            return

        request_lines = self.read_client_buffer.splitlines()
        print request_lines
        self.host_key = request_lines[0].split()[1]
        
        host = [
            x.split()[1] for x in request_lines if x.startswith("Host:")
        ]

        if not host:
            self.forward.write_buffer += self.read_client_buffer
            return

        self.host = host[0]

        print CACHE.get_cache()

        cache_contains = CACHE.search_cache(self.host_key)
        if cache_contains:
            logging.debug("GOT FROM CACHE")
            self.write_client_buffer += cache_contains
            return

        for (proxy, bloom_filter) in BLOOM_FILTERS.iteritems():
            logging.debug("Checking bloom filters for %s", self.host_key)
            if bloom_filter.query(self.host_key):
                logging.debug("A proxy had the request cached")
                logging.debug("bloom %s", bloom_filter.get_data())
                proxy.write_buffer += PROXY_SENTINEL + CACHE_REQ + self.host_key
                self.forward = proxy
                return

        # None of the proxies have the host cached
        self.forward = Forwarding_Agent((self.host, WEB_SERVER_PORT),
                                        self.read_client_buffer)
        self.read_client_buffer = ""
